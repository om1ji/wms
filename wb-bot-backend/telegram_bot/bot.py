import asyncio
import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from fastapi import FastAPI, Request
import uvicorn
from handlers import callbacks, commands

load_dotenv()

logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
dp = Dispatcher()

callbacks.bot = bot

dp.include_router(callbacks.router)
dp.include_router(commands.router)

app = FastAPI()

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏.")

async def send_order_notification(order_data):
    chat_id = os.getenv("TELEGRAM_GROUP_ID")
    
    text = f"""
üöö *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!* üöö

üì¶ *–°–∫–ª–∞–¥:* {order_data.get('warehouse_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üìè *–†–∞–∑–º–µ—Ä –∫–æ—Ä–æ–±–æ–∫:* {order_data.get('box_size', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫:* {order_data.get('box_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üéÅ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–ª–µ—Ç–æ–≤:* {order_data.get('pallet_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üéÅ *–í–µ—Å –ø–∞–ª–ª–µ—Ç—ã:* {order_data.get('pallet_weight', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* {order_data.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üë®‚Äçüíº *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:* {order_data.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìß *Email:* {order_data.get('client_email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {order_data.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑–∞:* {order_data.get('cost', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} ‚ÇΩ

üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:* {order_data.get('comments', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')}
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"order_accept_{order_data.get('order_id')}_{order_data.get('telegram_user_id')}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"order_reject_{order_data.get('order_id')}_{order_data.get('telegram_user_id')}")
        ]
    ])
    
    await bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard)

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@app.post("/api/send_notification")
async def send_notification(request: Request):
    try:
        order_data = await request.json()
        await send_order_notification(order_data)
        return {"status": "success"}
    except Exception as e:
        logging.error(f"Error sending notification: {str(e)}")
        return {"status": "error", "message": str(e)}

# –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –≤–º–µ—Å—Ç–µ —Å –±–æ—Ç–æ–º
async def main() -> None:
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot_task = asyncio.create_task(dp.start_polling(bot))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä
    config = uvicorn.Config(app, host="0.0.0.0", port=8080)
    server = uvicorn.Server(config)
    await server.serve()

@app.get("/health")
async def health_check():
    return {"status": "ok"}

if __name__ == "__main__":
    asyncio.run(main())