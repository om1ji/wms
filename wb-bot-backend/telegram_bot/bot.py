import asyncio
import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from fastapi import FastAPI, Request
import uvicorn
from handlers import callbacks, commands

load_dotenv()

logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
dp = Dispatcher()

callbacks.bot = bot

dp.include_router(callbacks.router)
dp.include_router(commands.router)

class OrderData:
    order_id: str
    telegram_user_id: str
    warehouse_name: str
    date: str
    box_size: str | None = None
    box_count: str | None = None
    pallet_count: str | None = None
    pallet_weight: str | None = None
    company_name: str | None = None
    client_name: str | None = None
    client_phone: str | None = None
    cost: str = None
    delivery_price: str = None
    comments: str | None = None
    additional_services: str | None = None
    
app = FastAPI()

def message_builder(order_data: OrderData) -> str:
    text = f"""
    –ó–∞–∫–∞–∑ #{order_data.order_id}

üì¶ *–°–∫–ª–∞–¥:* {order_data.warehouse_name}
üìÖ *–î–∞—Ç–∞:* {order_data.date}
    """
    if order_data.box_size:
        text += f"üìè *–†–∞–∑–º–µ—Ä –∫–æ—Ä–æ–±–æ–∫:* {order_data.box_size}\n"
        text += f"üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫:* {order_data.box_count}\n"
        
    if order_data.pallet_count:
        text += f"üéÅ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–ª–µ—Ç–æ–≤:* {order_data.pallet_count}\n"
        text += f"üéÅ *–í–µ—Å –ø–∞–ª–ª–µ—Ç—ã:* {order_data.pallet_weight}\n"
        
    if order_data.additional_services:
        text += f"üîß *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:* {order_data.additional_services}\n"
        
        
    text += f"""
    üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* {order_data.company_name}
üë®‚Äçüíº *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:* {order_data.client_name} {order_data.client_phone}
    """
        
    text += f"üí∞ *–û–±—ä—è–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {order_data.cost} ‚ÇΩ"
    text += f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:* {order_data.delivery_price} ‚ÇΩ"
    
    if order_data.comments:
        text += f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:* {order_data.comments}\n"
        
    return text


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏.")

async def send_order_notification(order_data):
    chat_id = os.getenv("TELEGRAM_GROUP_ID")
    text = message_builder(order_data)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"order_accept_{order_data.get('order_id')}_{order_data.get('telegram_user_id')}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"order_reject_{order_data.get('order_id')}_{order_data.get('telegram_user_id')}")
        ]
    ])
    
    await bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard)

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@app.post("/api/send_notification")
async def send_notification(request: Request):
    try:
        order_data = await request.json()
        await send_order_notification(order_data)
        return {"status": "success"}
    except Exception as e:
        logging.error(f"Error sending notification: {str(e)}")
        return {"status": "error", "message": str(e)}

# –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –≤–º–µ—Å—Ç–µ —Å –±–æ—Ç–æ–º
async def main() -> None:
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot_task = asyncio.create_task(dp.start_polling(bot))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä
    config = uvicorn.Config(app, host="0.0.0.0", port=8080)
    server = uvicorn.Server(config)
    await server.serve()

@app.get("/health")
async def health_check():
    return {"status": "ok"}

if __name__ == "__main__":
    asyncio.run(main())